#!/usr/bin/env bash

[ "$DEBUG" == "1" ] && set -x
set -eu -o pipefail -o posix
export SHELLOPTS

function echo_err {
    local msg=$1
    echo "ERROR: $1" 1>&2
}

which curl > /dev/null || { echo_err "curl command not found"; exit 2; }

: ${JSON_PARSER:=$(which jq)}
: ${JSON_PARSER:=$(which python)}

if [ -z "$JSON_PARSER" ]; then
    echo "No JSON parser found"
    exit 3
fi

function get_token {
    local repository=$1
    local auth_response
    local token

    auth_response=$(curl -sSLf "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${repository}:pull")

    if [[ "$JSON_PARSER" =~ "python" ]]; then
        token=$($JSON_PARSER -c "import json; print(json.loads('''$auth_response''')['token'])")
    else
        token=$(echo "$auth_response" | $JSON_PARSER -r '.token')
    fi

    if [ -z "$token" ] || [ "$token" == "null" ]; then
        echo_err "Token not found"
        exit 7
    fi

    echo $token
}

function get_image_id {
    local token=$1
    local repository=$2
    local tag=$3
    local manifest
    local image_id

    manifest=$(curl -sSLf \
                    -H "Authorization: Bearer ${token}" \
                    -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                    "https://index.docker.io/v2/${repository}/manifests/${tag}")

    # format: `sha256:<HASH>`
    if [[ "$JSON_PARSER" =~ "python" ]]; then
        image_id=$($JSON_PARSER << EOF
import json
manifest = json.loads('''$manifest''')
digest = manifest['config']['digest']
print(digest.split(':')[1])
EOF
                 )
    else
        image_id=$(echo $manifest | $JSON_PARSER -r '.config.digest' | cut -d':' -f2)
    fi

    if [ -z "$image_id" ] || [ "$image_id" == "null" ]; then
        echo_err "Image id not found"
        exit 8
    fi

    echo $image_id
}

function fix_library_repository {
    local repository=$1
    if [ "$(echo "$repository" | grep --count '/')" == "0" ]; then
        repository="library/$repository"
    fi
    echo $repository
}


function print_hash {
    local full=$1

    if [ "$full" == "1" ]; then
        echo $IMAGE_ID
    else
        echo ${IMAGE_ID:0:12}
    fi
}

function show_usage {
    echo "Usage: $0 [--full] NAME TAG" 1>&2
}


# Parse args
DISPLAY_FULL_HASH=0

while [ "$#" -gt "0" ]; do
    case "$1" in
        -h|--help) show_usage ; exit ;;
        --full) DISPLAY_FULL_HASH=1 ; shift 1 ;;
        *)
            [ "$#" -ne "2" ] && show_usage && exit 9
            REPOSITORY=$1
            TAG=$2
            shift 2
            ;;
     esac
done

if [ -z "$REPOSITORY" ] || [ -z "TAG" ]; then
    show_usage
    exit 4
fi


## Main

REPOSITORY=$(fix_library_repository $REPOSITORY)
TOKEN=$(get_token $REPOSITORY)
IMAGE_ID=$(get_image_id $TOKEN $REPOSITORY $TAG)

print_hash $DISPLAY_FULL_HASH
